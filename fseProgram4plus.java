// The "fseProgram4plus" class.
/*
************************************************
*   NAME        : Taylor DeVries               *
*   Program Name: fseProgram4plus.java         *
*   Date        : 06/12/2023                   *
*   Description : reads in an file containing  * 
*                 information on different     *
*                 teachers, sorts each teacher *
*                 by ascending seniority number* 
*                 then calculates all different*
*                 combinations of courses they *
*                 can teach if each teacher can*
*                 teach 6 courses. These       *
*                 permutations are printed out *
*                 in an output file with the   *
*                seniority numbers respectively*
*                                              *
************************************************
*/

import java.io.*;            //imports all io functions
import java.util.ArrayList;  //imports array lists util
import java.util.List;       //imports list util
 
class Teachers {

	String name;      // creating a string variable for teacher name
	int seniority;    // creating a int variable for seniority number
	String hireDate;  // creating a string variable for hire date
	String courses;   // creating an String variable for courses 

//getters and setters below auto-generated
	public String getname() {
		return name;
	}

	public void setname(String name) {
		this.name = name;
	}

	public int getseniority() {
		return seniority;
	}

	public void setseniority(int seniority) {
		this.seniority = seniority;
	}

	public String gethireDate() {
		return hireDate;
	}

	public void sethireDate(String hireDate) {
		this.hireDate = hireDate;
	}

	public String getcourses() {
		return courses;
	}

	public void setcourses(String courses) {
		this.courses = courses;
	}

}// end class Teachers()

public class fseProgram4plus {
	
	/*  *******************************************************
	 *   Method Name : findCombinations()                     *
	 *   Inputs      : String courses - the courses a teacher *
	 *                 can teach                              *
	 *   Returns     : List<String> - the combinations that   *
	 *                 can be made using the courses a teacher*
	 *                 can teach                              *       
	 *   Description : sends courses information to be        *
	 *                 generated by the backtrack method      *
	 *                 then returns all the combos as an      *
	 *                 array list                             *
	 *                                                        *
	 **********************************************************
	*/
	public static List<String> findCombinations(String courses) {
        List<String> combinations = new ArrayList<>();                //creates an ArrayList to store all the combinations the can be generated
        backtrack(combinations,courses , new StringBuilder(), 0, 6);  //calls he backtrack method to generate the combinations by sending the combinations list, courses string, empty StringBuilder, initial index of 0, and the length the combinations must be (6)
        return combinations;                                          //returns all the generated combinations
    }//end method findCombinations

	/*  *******************************************************
	 *   Method Name : backtrack()                            *
	 *   Inputs      : List<String> combinations - array list *
	 *                 that holds the combinations of courses *
	 *                 String courses- the courses a teacher  *
	 *                 can teach (characters)                 *
	 *                 StringBuilder current - object to track*
	 *                 the current combination being generated*
	 *                 int index - starting position in the   *
	 *                 courses string                         *
	 *                 int length - pos 6 to rep length of    *
	 *                 combinations                           *
	 *   Returns     : nothing                                *       
	 *   Description : generates combinations of the courses  *
	 *                 and stores them in the list            *
	 *                 'combinations'. sends each 6 course    *
	 *                 iteration to be checked for the special*
	 *                 case                                   *
	 *                                                        *
	 **********************************************************
	*/
    
    private static void backtrack(List<String> combinations, String courses, StringBuilder current, int index, int length) {
        
    	// checks if the current combination has reached 6 (number of courses in each combination)
        if (current.length() == length) {
            // checks if the number of Xs in the current combination is less than or equal to 2
            if (countOccurrences(current.toString(), 'X') <= 2) {
                combinations.add(current.toString());            // adds the current combination to the list of combinations
            }//end if
            return;                                              //returns bec the current length is 6
        }//end if
        
        // if the index is bigger than the length of the courses it returns
        if (index >= courses.length()) {
            return;
        }//end if

        // loops through the courses string starting from the index
        for (int i = index; i < courses.length(); i++) {
            current.append(courses.charAt(i));                    // adds the character at the current index to the current combination
            backtrack(combinations, courses, current, i, length); // recursively call the backtrack method to generate combination with the updated current combination and the same parameters, except the index is set to the current value of i
            current.deleteCharAt(current.length() - 1);           // removes the last character from the current combination to backtrack and try other combinations
        }//end for
    }//end method backtrack
    
	/*  *******************************************************
	 *   Method Name : countOccurences()                      *
	 *   Inputs      : String str- the combinations of courses*
	 *                 char- the letter X                     *
	 *   Returns     : int- number of Xs found in the string  *       
	 *   Description : counts how many times an X occurs in   *
	 *                 the string sent to the method          *
	 *                                                        *
	 **********************************************************
	*/
    private static int countOccurrences(String str, char target) {
        int count = 0;                                              //creates an int to hold the number of Xs  
        //loops for each char in the string
        for (int i = 0; i < str.length(); i++) {
        	
        	//checks if the char at each position is an X
            if (str.charAt(i) == target) {
                count++;                                            //adds one to count if the position is an X
            }//end if
        
        }//end for
        return count;                                               //returns number of Xs found in the string
    }//end method countOccurrences

	/*  *******************************************************
	 *   Method Name : formatCombination()                    *
	 *   Inputs      : String combination: the combination    *
	 *                 of courses                             *
	 *   Returns     : String- combinations with commas       *       
	 *   Description : takes the combination of courses and   *
	 *                 puts a comma in between each letter    *
	 *                                                        *
	 **********************************************************
	*/
    public static String formatCombination(String combination) {
        StringBuilder formattedCombination = new StringBuilder();  //creating a StringBuilder to build the combinations with commas
        
        //loops through each character in the combination string 
        for (int i = 0; i < combination.length(); i++) {
        	
        	//if the current index is greater than 0, add a comma to separate the characters
            if (i > 0) {
                formattedCombination.append(",");
            }//end if
            
            formattedCombination.append(combination.charAt(i));   //appends the current char to the StringBuilder 
        }//end for
        return formattedCombination.toString();                   //converts the StringBuilder to a string and returns the combination with commas
    }//end method formatCombination
	
	/*  *******************************************************
	 *   Method Name : swap()                                 *
	 *   Inputs      : Teachers[] teacherInfo; unsorted array *
	 *   			   int i; pos before j that needs to be   *
	 *                        swapped to go in j place        *
	 *                 int j; pos that i needs to be swapped  *
	 *                        with                            *
	 *   Returns     : nothing                                *       
	 *   Description : swaps the value of teacherInfo[i]      *
	 *                 with the value at teacherInfo[j]       *
	 *                                                        *
	 **********************************************************
	*/
	static void swap(Teachers[] teacherInfo, int i, int j) {
		int temp = teacherInfo[i].seniority;                  //stores the seniority of pos i in a temp variable
		teacherInfo[i].seniority = teacherInfo[j].seniority;  //assigns the seniority value at j to pos i 
		teacherInfo[j].seniority = temp;                      //sets senority info at j abck to temp which swaps the two positions
	}//end method swap
	
	/*  *******************************************************
	 *   Method Name : partition()                            *
	 *   Inputs      : Teachers[] teacherInfo; unsorted array *
	 *   			   int start; the start positon 0         *
	 *                 int end; length of the array           *
	 *   Returns     : int for the appropriate number in      *
	 *                 array based on the piviot              *       
	 *   Description : uses data from quickSort method to     *
	 *                 compare elements in the array to       *
	 *                 pivot pos and swaps if needed          *
	 *                                                        *
	 **********************************************************
	*/
	static int partition(Teachers[] teacherInfo, int start, int end)
	{
		int pivot = teacherInfo[end].seniority; //sets the pivot value to the end of the array
		int i = (start-1);                      //uses i to hold value one less than start
		
		//runs for the length of the array you have the needs to be sorted
		for (int j= start; j <= end-1 ; j++) {
			if (teacherInfo[j].seniority < pivot)  //checks if the pos at the start is less than the pivot (and the order is 0 therefore it sorts in ascending order)
			{ 
				i++;                               //sets the i int up by one
				swap(teacherInfo, i, j);           //sends teacher info, i int, and j int to the swap method
			}//end if
		}//end for
		swap(teacherInfo, i +1, end);              //sends teacher info, i int plus 1, and end int to swap method
		return (i+1);                              //returns i +1 
	}//end method partition

	/*  *******************************************************
	 *   Method Name : quickSort()                            *
	 *   Inputs      : Teachers[] teacherInfo; unsorted array *
	 *   			   int start; the start position 0        *
	 *                 int end; length of the array           *
	 *   Returns     : teacherInfo - the sorted array         *       
	 *   Description : completes a quick sort of unsorted     *
	 *                 array of just the teacher              *
	 *                 seniority numbers recursively          *
	 *                                                        *
	 **********************************************************
	*/
	public static Teachers[] quickSort(Teachers[] teacherInfo, int start, int end)
	{
		//runs if the pos of start is less than the end
		if (start<end ) {
			int p = partition(teacherInfo,start,end); //sends the unsorted array, start pos, end pos, and order of sort to partition method
			quickSort(teacherInfo,start,p-1);         //uses value from partition method to recursivly continue the sort
			quickSort(teacherInfo,p+1,end);           //uses value from partition method to recursivly continue the sort
		}//end if
		return teacherInfo;
	}//end method quickSort
	
	public static void main(String[] args) throws IOException
	{
		String lineRead;                             //creates a string variable to hold in the input file lines
		String stringHolder;                         //creates a string variable to hold in the string in between the commas
		int counter = 0;;                            //creates an int for a counter variable
		int comma = 0;                               //creates an int for the comma pos
		Teachers teacherInfo[] = new Teachers[201];  //creates a array to hold the teacher info from the class Teachers and it can hold 200 elements
		int printNum = 0;                            //creates an int for the number of teachers to print to the output file
		
		//initializing the array teacherInfo with 201 elements where each element is an instance of the Teachers class
		for(int x =0; x < 201; x++) {
			teacherInfo[x] = new Teachers();
		}//end for
		
		try {
			
			BufferedReader inputFile    = new BufferedReader (new FileReader ("C:\\Users\\taylo_gdgtqax\\Com sci files\\teacherinfo.txt") ); //reads in the input file
			PrintWriter    outputFile   = new PrintWriter (new FileWriter("C:\\Users\\taylo_gdgtqax\\Com sci files\\teacherout.txt"));       //creats an output file
			lineRead = inputFile.readLine(); //puts the data from the input file into the lineRead variable
			
			outputFile.println ("Teacher SPECIFICATIONS");   //prints title to console
			outputFile.println ("--------------------");     //prints lines after the title
			
			while( lineRead != null) {
				
				comma = lineRead.indexOf(",");                                       //finds the comma pos
				stringHolder = lineRead.substring(0, comma);                         //holds the position from current pos to the comma
				teacherInfo[counter].setname(stringHolder);                          //sets teacher name to that corresponding string 
				lineRead = lineRead.substring(comma+1);                              //reduces the read line to exclude the string just used
				
				comma = lineRead.indexOf(",");                                       //finds the comma pos
				stringHolder = lineRead.substring(0, comma);                         //holds the position from current pos to the comma
				teacherInfo[counter].setseniority(Integer.parseInt(stringHolder));   //sets seniority to that corresponding string which is converted to an int
				lineRead = lineRead.substring(comma+1);                              //reduces the read line to exclude the string just used
				
				comma = lineRead.indexOf(",");                                       //finds the comma pos
				stringHolder = lineRead.substring(0, comma);                         //holds the position from current pos to the comma
				teacherInfo[counter].sethireDate(stringHolder);                      //sets hire date to that corresponding string 
				lineRead = lineRead.substring(comma+1);                              //reduces the read line to exclude the string just used
				
				comma = lineRead.indexOf(",");                                       //finds the comma pos
				stringHolder = lineRead.substring(0);                                //holds the position from current pos to the comma
				teacherInfo[counter].setcourses(stringHolder);                       //sets teachable course to that corresponding string 

				counter++;                                                           //adds one to the counter
				lineRead = inputFile.readLine();                                     //reads the next line 
			}//end while
			
			teacherInfo = quickSort(teacherInfo, 0, counter-1); //sends teacher info to the quickSort method to sort in increasing order by seniority

			//while there are still teachers that have'nt had their permutations calculated
			while (teacherInfo[printNum].name !=null) {
				
				outputFile.println("# " + teacherInfo[printNum].getseniority());              //prints out the seniority 
				outputFile.println(teacherInfo[printNum].getcourses());                       //prints out the courses each teacher can teach
				List<String> combinations = findCombinations(teacherInfo[printNum].courses);  //creates an array list for the combinations of teachers courses, and sends the courses to the method findCombinations
				
		        outputFile.println("Unique 6-Character Combinations:");                       //prints to the output file indicating the string combinations follow

		        //looping over a collection of strings
		        for (String combination : combinations) {
		        	outputFile.println(formatCombination(combination));                       //sends the string to the method to print out the combinations with commas 
		        }//end for
		        
				printNum++; //adds one to the counter and goes to the next teacher in the list
			}//end while
			
			outputFile.close(); //closes output file
			inputFile.close();  //closes input file
			
		}//end try
		
		 catch (IOException e) //catches errors and prints out what the error is if generated
	    {
	        System.out.println ("***************Error Generated*********************");
	        System.out.println (e);
	    } //end catch IOExeption
		
	}// end method main()
}// end class fseProgram4plus
